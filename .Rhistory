install.packages("caret")
install.packages("RColorBrewer")
biocLite("genefilter")
install.packages("gplots")
install.packages("matrixStats")
install.packages("animation")
biocLite("yeastCC")
install.packages("UsingR")
# Week 6
biocLite("genefilter")
install.packages("MASS")
biocLite("hgfocus.db")
biocLite("sva")
biocLite("limma")
# Week 7
biocLite("GEOquery")
biocLite("limma")
biocLite("org.Hs.eg.db")
biocLite("GO.db")
biocLite("SpikeInSubset")
biocLite("genefilter")
biocLite("rae230a.db")
biocLite("AnnotationDbi")
biocLite("biomaRt")
# Week 8
biocLite("pasillaBamSubset")
biocLite("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
biocLite("Rsamtools")
biocLite("GenomicAlignments")
biocLite("DESeq2")
biocLite("biomaRt")
biocLite("Gviz")
biocLite("ggbio")
# For building data objects
Bioconductor:
biocLite("GEOquery")
biocLite("affy")
biocLite("simpleaffy")
biocLite("SpikeIn")
daset.seed(0)
dat=read.table("http://www.biostat.jhsph.edu/bstcourse/bio751/data/babies.data",header=TRUE)
set.seed(0)
smokers=sample(dat$bwt[dat$smoke==1],10)
nonsmokers=sample(dat$bwt[dat$smoke==0],10)
library(rafalib)
mypar()
stripchart(list(smokers,nonsmokers),vertical=TRUE,method="jitter",col=c(1,2),pch=15,group.names=c("smokers","nonsmokers"))
cat("observed difference = ",mean(smokers)-mean(nonsmokers)," ounces")
oopt = ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 2))
op = par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
par(op)
## HTML animation page
saveHTML({
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 10))
clt.ani(type = "h")
}, img.name = "clt.ani", htmlfile = "clt.ani.html", ani.height = 500, ani.width = 600,
title = "Demonstration of the Central Limit Theorem", description = c("This animation shows the distribution of the sample",
"mean as the sample size grows."))
## other distributions: Chi-square with df = 5 (mean = df, var = 2*df)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
ani.options(oopt)
install.packages("animation")
oopt = ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 2))
op = par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
par(op)
## HTML animation page
saveHTML({
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 10))
clt.ani(type = "h")
}, img.name = "clt.ani", htmlfile = "clt.ani.html", ani.height = 500, ani.width = 600,
title = "Demonstration of the Central Limit Theorem", description = c("This animation shows the distribution of the sample",
"mean as the sample size grows."))
## other distributions: Chi-square with df = 5 (mean = df, var = 2*df)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
ani.options(oopt)
oopt = ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 2))
op = par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
par(op)
## HTML animation page
saveHTML({
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 10))
clt.ani(type = "h")
}, img.name = "clt.ani", htmlfile = "clt.ani.html", ani.height = 500, ani.width = 600,
title = "Demonstration of the Central Limit Theorem", description = c("This animation shows the distribution of the sample",
"mean as the sample size grows."))
## other distributions: Chi-square with df = 5 (mean = df, var = 2*df)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
ani.options(oopt)
library(animation)
oopt = ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 2))
op = par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
par(op)
## HTML animation page
saveHTML({
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
ani.options(interval = 0.1, nmax = ifelse(interactive(), 150, 10))
clt.ani(type = "h")
}, img.name = "clt.ani", htmlfile = "clt.ani.html", ani.height = 500, ani.width = 600,
title = "Demonstration of the Central Limit Theorem", description = c("This animation shows the distribution of the sample",
"mean as the sample size grows."))
## other distributions: Chi-square with df = 5 (mean = df, var = 2*df)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
ani.options(oopt)
disease=c(rep(0,180),rep(1,20),rep(0,40),rep(1,10))
genotype=c(rep("AA",200),rep("aa",50))
tab=table(genotype,disease)
tab
p=mean(disease)
p
rbind(c(1-p,p)*sum(genotype=="aa"),c(1-p,p)*sum(genotype=="AA"))
chisq.test(tab)$p.value
tab=tab*10
chisq.test(tab)$p.value
set.seed(0)
smokers=sample(dat$bwt[dat$smoke==1],10)
nonsmokers=sample(dat$bwt[dat$smoke==0],10)
dat=read.table("http://www.biostat.jhsph.edu/bstcourse/bio751/data/babies.data",header=TRUE)
set.seed(0)
smokers=sample(dat$bwt[dat$smoke==1],10)
nonsmokers=sample(dat$bwt[dat$smoke==0],10)
library(rafalib)
mypar()
stripchart(list(smokers,nonsmokers),vertical=TRUE,method="jitter",col=c(1,2),pch=15,group.names=c("smokers","nonsmokers"))
cat("observed difference = ",mean(smokers)-mean(nonsmokers)," ounces")
(-6.1)*2
(-6.1)*-2
library(MASS)
ginv(A)
A<-matrix(c(1,2,4,2,1,1,3,1,2),nrow=3)
ginv(A)
library(MASS)
A<-matrix(c(1,2,4,2,1,1,3,1,2),nrow=3)
A
ginv(A)
1^-1
1/(1^-1)
A^-1
(A^-1)*A
A*(A^-1)
A^-1
ginv(ginv(A))
1/(A^-1)
A<-matrix(c(1,2,4,2,1,1,3,1,2),nrow=3)
A
ginv(A)
A^-1
C<-matix(c(4332),nrow=2)
C<-matrix(c(4332),nrow=2)
C
C<-matrix(c(4,3,3,2),nrow=2)
C
C^-1
(C)^-1
2^2
2^3
2^-3
2^-2
1^-2
2^-2
2^(-2)
2*-2
1/(2^2)
2^(-2)
ginv(A)
mns <- vector(length=1e5)
for(i in seq(1e5)) mns[i] <- mean(rexp(50))
mns2 <- vector(length=1e5)
for(i in seq(1e5)) mns2[i] <- mean(rexp(10))
plot(density(mns))
lines(density(mns2), lty=2)
rm(i)
data(maPooling)
library(dagdata)
e <- data(maPooling)
rm(list=ls())
library(dagdata)
e <- data(maPooling)
rm(list=ls())
library(dagdata)
data(maPooling)
e <- maPooling
rm(list=ls())
e <- data(maPooling)
class(e)
dim(e)
dim(maPooling)
install.packages("data.table")
library(data.table)
rm(list=ls())
data(maPooling)
rm(list=ls())
e <- data.table(data(maPooling))
rm(list=ls())
data(maPooling)
e -data.table(maPooling)
e <- data.table(maPooling)
dim(e)
rm(list=ls())
e <- data.table(data(maPooling))
e <- data.table(as.data.frame(data(maPooling)))
rm(list=ls())
e <- data.table(as.data.frame(data(maPooling)))
e <- data.table(as.data.frame(maPooling))
rm(list=ls())
e <- data.table(as.data.frame(maPooling))
library(dagdata)
e <- data.table(as.data.frame(maPooling))
data.table(maPooling)
data(maPooling)
e <- data.table(as.data.frame(maPooling))
rm(list=ls())
data(maPooling)
e <- maPooling
dim(e)
e <- data.table(maPooling)
e <- data.table(as.data.frame(maPooling))
class(e)
e <- as.data.table(maPooling)
rm(list=ls())
data(maPooling)
e <- as.data.table(maPooling)
e <- data.table(as.data.frame(maPooling))
rm(list=ls())
e <- maPooling
data(maPooling)
e <- maPooling
e[1,1]
head(e)
library(data.table)
> data(maPooling)
rm(list=ls())
data(maPooling)
e <- data.table(data(maPooling))
e <- as.data.frame(data(maPooling))
e <- as.data.frame(data(maPooling))
e <- as.data.frame(maPooling)
head(e)
# Background Assessment
rm(list=ls())
library(dagdata)
data(maPooling)
u = exprs(maPooling)[,1]
v = exprs(maPooling)[,2]
x = exprs(maPooling)[,3]
y = exprs(maPooling)[,4]
head(u)
# names(u)
dim(u)
length(u)
class(u)
u = exprs(maPooling)[,1]
v = exprs(maPooling)[,2]
x = exprs(maPooling)[,3]
y = exprs(maPooling)[,4]
head(u)
# names(u)
dim(u)
length(u)
class(u)
validIP <- "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[.]){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
any(grep(validIP, ipmessage)
)
system("ipconfig", intern = TRUE)
system("ipconfig", intern = TRUE)
rm(validIP)
a <- system("ipconfig", intern = TRUE)
library(sos)
# Let's find in the help pages for a function that includes the keywords
# folder AND path
a <- findFn("split")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
# Now let's subset the results to extract only those functions contained at
# the package "base" which is the one we are working with
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
d <- strsplit(a,":")
c <- system("ipconfig", intern = TRUE)
d <- strsplit(c,":")
d
a <- system("ipconfig", intern = TRUE)
a
d <- strsplit(c,": ")
d
d <- unlist(strsplit(c,": "))
d
c <- system("ipconfig", intern = TRUE)
d <- unlist(strsplit(c,": "))
d
c
d <- unlist(strsplit(c,": ")[2])
d
a <- findFn("internet connection")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
# Now let's subset the results to extract only those functions contained at
# the package "base" which is the one we are working with
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
a <- findFn("internet")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
# Now let's subset the results to extract only those functions contained at
# the package "base" which is the one we are working with
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
internet.info
internet.info()
a <- findFn("ipconfig")
a <- findFn("ip")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
# Now let's subset the results to extract only those functions contained at
# the package "base" which is the one we are working with
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
a <- findFn("test connection")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
showConnections()
showConnections(all=T)
url("www.google.com")
Sys.info()
system("ping www.google.com")
a <- findFn("ping")
# Let's take a look at the packages returned
summary(a, minPackages = 87)
# Now let's subset the results to extract only those functions contained at
# the package "base" which is the one we are working with
b <- a[a$Package=="base",]
# Open the filtered HTML page
b
?help.search
find(ls)
find(rm)
find(lowess)
find("lowess")
find("rm")
find("ls")
find("plot")
find("rm")
?apropos
apropos remove
apropos(remove)
apropos("remove")
apropos("remove object")
apropos("remove")
?.rs.removeObjects
apropos("directory")
apropos("dir")
apropos("file")
apropos("csv")
apropos("help")
?help
help("remove objects", package = "base");
help("remove", package = "base");
?help
?help.start
?help.start("remove objects", package = "base");
help.start("remove objects", package = "base");
help.start("remove objects");
help.start("rm");
help.start(rm);
help.start
help.start()
demo(r)
demo(rm)
library(help=spatial)
library(help=base)
?Paren
( \dots )
examples(Paren)
example(Paren)
Memory-limits
Memory-limits()
Memory()
?Memory
?abbreviate
example(abbreviate)
abbreviate("Diego")
abbreviate("Diego Felipe Pereira")
abbreviate("Diego Felipe Pereira Perdomo")
library(help=base)
help(abbreviate)
?abbreviate
?help
help(Control)
dir()
mylocal.path <- "C:/Users/Diego/Documents/GitHub/R-Notes";
setwd(mylocal.path);
rm(mylocal.path)
dir()
?[.data.frame
help.search("Extract or Replace Parts of a Data Frame")
example(
Extract.data.frame)
example("Extract.data.frame")
example(Extract.data.frame)
example("[.data.frame")
example("[.data.frame")
# Let's first create a data frame:
df <- data.frame(col1 = numeric(2),
col2 = numeric(2),
stringsAsFactors = F)
# Now let's assign some values.
df[1,1] <- 1
df[1,2] <- 0.5
df[2,1] <- 2
df[2,2] <- 0.25
df
# Let's create a variable for passing the name of the column.
# Uncomment one by one and see the results.
my.column <- "col1"
# my.column <- "col2"
# my.column <- "col3"
if(my.column == "col1"){
sum(df$col1)
} else if(my.column == "col2"){
sum(df$col2)
} else{
cat("The column",my.column,"is not part of the data frame df.")
}
?ifelse
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column,"is not part of the data frame df."))
my.column <- "col2"
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column,"is not part of the data frame df."))
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column,"is not part of the data frame df."))
my.column <- "col3"
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column,"is not part of the data frame df."))
rem(list=ls())
rm(list=ls())
# Let's first create a data frame:
df <- data.frame(col1 = numeric(2),
col2 = numeric(2),
stringsAsFactors = F)
# Now let's assign some values.
df[1,1] <- 1
df[1,2] <- 0.5
df[2,1] <- 2
df[2,2] <- 0.25
df
my.column <- "col3"
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column,"is not part of the data frame df."))
if(my.column == "col1"){
sum(df$col1)
} else if(my.column == "col2"){
sum(df$col2)
} else{
cat("The column",my.column,"is not part of the data frame df.")
}
ifelse(my.column %in% names(df),
sum(df[,my.column]),
0)
ifelse(my.column %in% names(df),
sum(df[,my.column]),
cat("The column",my.column))
ifelse(my.column %in% names(df),
sum(df[,my.column]),
print("The column does not exist at the df data frame.")))
ifelse(my.column %in% names(df),
sum(df[,my.column]),
print("The column does not exist at the df data frame."))
ifelse(my.column %in% names(df),
sum(df[,my.column]),
"The column does not exist at the df data frame.")
switch(my.column,
col1 = mean(df$col1),
col2 = log(df$col2),
stop("The column does not exist at the df data frame."))
my.column <- "col1"
switch(my.column,
col1 = mean(df$col1),
col2 = log(df$col2),
stop("The column does not exist at the df data frame."))
my.column <- "col2"
switch(my.column,
col1 = mean(df$col1),
col2 = log(df$col2),
stop("The column does not exist at the df data frame."))
switch(my.column,
col1 = mean(df$col1),
col2 = log10(df$col2),
stop("The column does not exist at the df data frame."))
help(Control)
